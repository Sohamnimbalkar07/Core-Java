Exception Handling 


Revise
protected access specifier --
Will they be accessible --in the same class,in the same pkg sub class,in the same pkg non subclass
different pkg sub class
equals --checking equality
Method belongs to which class ? --java.lang.Object
Method declaration -- public boolean equals(Object o)
What does it return ? boolean
eg : s1.equals(s2)
Object class's equals methods will ret true ---iff s1 n s2 are referring to the SAME object(reference equality)
Student s1=new Student(....);
Student s2=new Students(...);
sop(s1.equals(s2));//false
Student s3=s2;
sop(s2.equals(s3));//true

What is the need of overriding it ? ---to replace ref equality by content equality(based upon unique ID --Primary key)
Solve part of the assignment.

What is exception ? --run time error , detected by JVM's main thread 
Why exception handling ?
1. To continue with the program execution , even after run time errs(eg :invalid inputs,B.L failures,validation failures, file not found, invalid casting....)
2. To separate B.L (try block) from error handling logic(catch)

Flow 
div by 0 ---JVM chks the type of the err ---throw new AritmeticException("/ by 0");
JVM chks -- exc handler exists --NO ---Aborts the code , prints name of the exc, error mesg , location
(stack trace)

MATCHING exc handler exists --YES (catch) --try block aborts --JVM execs catch block --code continues.

Inheritance hierarchy of exc handling classes
java.lang.Throwable --super class
java.lang.Error --fatal (eg : IOError,StackOverflow.....)
java.lang.Exception
java.lang.RuntimeException   ----un checked exc

try-catch keywords
checked vs un checked exceptions
who doesn't differentiate between checked vs un checked exceptions --JVM (JVM aborts the code in case of un handled --no try-catch ,  chked as well as un-chked excs)

who differentiates ? ---javac
javac forces handling of the checked excs , o.w javac error

throws
finally
try-with-resources
custom exceptions
objective : Accept speed of a vehicle from user (scanner) --highway
min speed : 30
max speed : 80
speed < 30 
speed > 80
In case of speed outside the range --Prog will have to detect the err --create instance of user defined exc class --explicitly throw custom exc to the code.
eg : throw new SpeedOutOfRangeException("u r too fast!!! ....");
Steps
1.Create custom exception class
2. Create a separate class  eg :  SpeedUtils --
add a method for validation the speed
3. Create Tester : UI --scanner --accept the speed n simply call validateSpeed of the SpeedUtils  class
