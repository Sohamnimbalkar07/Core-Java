Today's topics
Polymorphism
Abstraction

Revise
Why Inheritance : reduce redundancy n enhance reusabilty
Types : single , multi level , multiple inhertiance (not supported : ambiguity)

constr invocation in inheritance hierarchy : refer to diag.
super --keyword in java

super keyword usages
1. To invoke immediate super cls's MATCHING  constr (eg : super(firstName,lastName);)
2. To access super cls's accessible members (eg : super.toString())

Important statements
Sub class IS A super class + something more(addtional data members + methods) + something modified(behaviour : methods : method overriding)

toString ---whose method : java.lang.Object
public String toString() --- F.Q. className @ hashCode

What's the need of overriding it ?
To replace hashcode returning version by actual state details

eg : 
package bank;
public class Account
{
// state : acctNo , name, balance,type
//constr
public String toString()
{
  return "Bank Account "+acctNo+" "......;
}
  
}
In Tester
Account a1=new Account(...);
sop(a1.toString());//a/c details

Do you need any help in solving Fruit based assignment ?

----------------------
Enter polymorphism : refer to readme inheritance poly.

Refer to method overloading vs method overriding

Identify the rules.
Examples of method overloading : print / println methods

Example of Method overriding
eg : toString

Java Annotation
eg : @Override annotation

java.lang.Object : universal super class of all java classes
public String toString() : rets F.Q cls Name @ hashcode
What's the need of overriding toString : to replace hashCode returning version by actual object details




With simple example : Object , Person , Student,Faculty
2. Event Organizer app
 Suitable data structure : array of references 
Type of array : Student[] or Faculty[] : wrong options
correct : Person[] 

Menu :
1 : Register Student
2. : Register Faculty
3. Display all participant details 
100. : Exit

4. Display specific participant details
i/p : seat no


1.  Upcasting
eg : Object o=new Faculty(......);//up casting
sop(o);//what will happen ?

Solve :
Fruit : super class
public void taste()
{
 sop("No specific taste");
}
Mango extends Fruit
{
 override : to display "sweet"
}
Orange extends Fruit
{
 override : to display "sour"
}
Alphonso extends Mango
{
   override : to display "sweet n juicy"
}

Tester :
Fruit[] basket={new Mango(),new Orange(),new Alphonso(),new Orange()};
for (Fruit f : basket)
  sop(f.taste());


Take a look at this 
Q : Suppose you have added  a new functionality in Mango : public void pulp(){....}
What will happen ?
Fruit f=new Mango();
f.taste();
//f.pulp();//javac err
((Mango)f).pulp();//down casting is mandatory

f=new Orange(...);//up casting
f.pulp();//javac err
((Mango)f).pulp();//ClassCastException : Orange can't be cast into Mango


3. Need of downcasting
Objective : Executing sub class specific functionality.
Add a new method "study" in Student class & "teach" in Faculty class
Option 4 : User i/p : seat no
Check if seat no is valid .
In case of valid seat no  --- If it's a Student , invoke study method , if it's a Faculty invoke teach method

4. instanceof keyword

5. Enter abstraction

eg : Shapes scenario
Solve this

1. BoundedShape -- x,y 

public String toString()

2. Circle -- x,y,radius
Method --public double area()
public String toString()

3. Rectangle -- x,y,w,h
Method --public double area()
public String toString()

